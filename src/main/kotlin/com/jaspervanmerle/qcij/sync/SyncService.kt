package com.jaspervanmerle.qcij.sync

import com.intellij.openapi.components.service
import com.intellij.openapi.project.Project
import com.intellij.openapi.vfs.newvfs.events.VFileContentChangeEvent
import com.intellij.openapi.vfs.newvfs.events.VFileCopyEvent
import com.intellij.openapi.vfs.newvfs.events.VFileCreateEvent
import com.intellij.openapi.vfs.newvfs.events.VFileDeleteEvent
import com.intellij.openapi.vfs.newvfs.events.VFileEvent
import com.intellij.openapi.vfs.newvfs.events.VFileMoveEvent
import com.jaspervanmerle.qcij.config.ConfigService

class SyncService(private val project: Project) {
    private val config = project.service<ConfigService>()

    fun processEvents(events: List<VFileEvent>) {
        for (event in events) {
            // TODO(jmerle): Check if event was generated by a user action or by the SyncTask
            onEvent(event)
        }
    }

    private fun onEvent(event: VFileEvent) {
        when (event) {
            is VFileCreateEvent -> onCreate(event)
            is VFileContentChangeEvent -> onContentChange(event)
            is VFileDeleteEvent -> onDelete(event)
            is VFileMoveEvent -> onMove(event)
            is VFileCopyEvent -> onCopy(event)
        }
    }

    private fun onCreate(event: VFileCreateEvent) {
        println("create: ${event.path}")
    }

    private fun onContentChange(event: VFileContentChangeEvent) {
        println("contentChange: ${event.file.path}")
    }

    private fun onDelete(event: VFileDeleteEvent) {
        println("delete: ${event.path}")
    }

    private fun onMove(event: VFileMoveEvent) {
        println("move: ${event.file.path} : ${event.oldParent.path} -> ${event.newParent.path}")
    }

    private fun onCopy(event: VFileCopyEvent) {
        println("copy: ${event.file.path} -> ${event.newParent.path} : ${event.newChildName}")
    }
}
